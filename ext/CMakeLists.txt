##########################################################################################
# SGCT                                                                                   #
# Simple Graphics Cluster Toolkit                                                        #
#                                                                                        #
# Copyright (c) 2012-2023                                                                #
# For conditions of distribution and use, see copyright notice in LICENSE.md             #
##########################################################################################

if (SGCT_DEP_INCLUDE_CATCH2)
  add_subdirectory(catch2)
endif ()

if (SGCT_DEP_INCLUDE_GLAD)
  add_subdirectory(glad)
  set_property(TARGET glad PROPERTY FOLDER "Dependencies")
  sgct_register_package(glad glad::glad)
endif ()

if (SGCT_DEP_INCLUDE_FMT)
  set(FMT_DOC OFF CACHE BOOL "Generate the doc target.")
  set(FMT_INSTALL OFF CACHE BOOL "Generate the install target.")
  set(FMT_TEST OFF CACHE BOOL "Generate the test target.")
  add_subdirectory(fmt)
  mark_as_advanced(FMT_DOC FMT_INSTALL FMT_PEDANTIC FMT_TEST FMT_WERROR)
endif ()

if (SGCT_DEP_INCLUDE_SCN)
  add_subdirectory(scnlib)
  sgct_register_package(scn)
endif ()

if (SGCT_DEP_INCLUDE_ZLIB)
  add_subdirectory(zlib)
  set_property(TARGET zlib1 PROPERTY FOLDER "Dependencies")
  set_property(TARGET minizip PROPERTY FOLDER "Dependencies")
  sgct_register_package(minizip minizip::minizip)
  sgct_register_package(ZLIB ZLIB::ZLIB)
endif ()

if (SGCT_DEP_INCLUDE_GLFW)
  set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "Build the GLFW example programs")
  set(GLFW_BUILD_TESTS OFF CACHE BOOL "Build the GLFW test programs")
  set(GLFW_BUILD_DOCS OFF CACHE BOOL "Build the GLFW documentation")
  set(GLFW_INSTALL OFF CACHE BOOL "Generate installation target")
  add_subdirectory(glfw)
  set_property(TARGET glfw PROPERTY FOLDER "Dependencies")
  sgct_register_package(glfw3 glfw)
endif ()

if (SGCT_DEP_INCLUDE_LIBPNG)
  add_subdirectory(lpng)
  set_property(TARGET png PROPERTY FOLDER "Dependencies")
  add_library(PNG::PNG ALIAS png)
  sgct_register_package(PNG PNG::PNG)
endif ()

if (SGCT_DEP_INCLUDE_GLM)
  add_library(glm INTERFACE)
  target_include_directories(glm SYSTEM INTERFACE "glm")
  sgct_register_package(glm glm)
endif ()

if (SGCT_DEP_INCLUDE_TINYXML)
  add_subdirectory(tinyxml)
  set_target_properties(tinyxml2 PROPERTIES FOLDER "Dependencies")
  add_library(tinyxml2::tinyxml2 ALIAS tinyxml2)
  sgct_register_package(tinyxml2 tinyxml2::tinyxml2)
endif ()

if (SGCT_DEP_INCLUDE_FREETYPE AND SGCT_FREETYPE_SUPPORT)
  set(SKIP_INSTALL_ALL ON)
  add_subdirectory(freetype2) # needs zconf.h generated by lpng->zlib
  target_include_directories(freetype PUBLIC SYSTEM freetype2/include)
  set_target_properties(freetype PROPERTIES FOLDER "Dependencies")
  sgct_register_package(freetype freetype)
endif ()

if (SGCT_DEP_INCLUDE_VRPN AND SGCT_VRPN_SUPPORT)
  add_subdirectory(vrpn)
  set_target_properties(vrpn PROPERTIES FOLDER "Dependencies")
  sgct_register_package(vrpn vrpn)
endif ()

if (SGCT_DEP_INCLUDE_OPENVR AND SGCT_OPENVR_SUPPORT)
  add_library(openvr INTERFACE)
  sgct_register_package(openvr openvr)
endif ()

if (WIN32 AND SGCT_SPOUT_SUPPORT)
  add_library(spout SHARED IMPORTED GLOBAL)
  target_include_directories(spout INTERFACE spout)
  set_property(TARGET spout PROPERTY IMPORTED_IMPLIB ${PROJECT_SOURCE_DIR}/ext/spout/SpoutLibrary.lib)
  set_property(TARGET spout PROPERTY IMPORTED_LOCATION ${PROJECT_SOURCE_DIR}/ext/spout/SpoutLibrary.dll)
endif ()

if (NOT TARGET tracy)
  add_library(tracy STATIC "${PROJECT_SOURCE_DIR}/ext/tracy/TracyClient.cpp")
  target_include_directories(tracy PUBLIC "tracy")
  set_property(TARGET tracy PROPERTY FOLDER "Dependencies")
  target_compile_definitions(tracy
    PUBLIC
      $<$<BOOL:${SGCT_DEP_ENABLE_TRACY}>:TRACY_ENABLE>
    PRIVATE
      _CRT_SECURE_NO_WARNINGS
  )
endif ()

#
# nlohmann::json
#
add_library(json INTERFACE)
target_include_directories(json INTERFACE "json/single_include")

#
# stb
#
add_library(stb INTERFACE)
target_include_directories(stb SYSTEM INTERFACE ${PROJECT_SOURCE_DIR}/ext/stb)
