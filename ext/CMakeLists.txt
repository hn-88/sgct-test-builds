##########################################################################################
# SGCT                                                                                   #
# Simple Graphics Cluster Toolkit                                                        #
#                                                                                        #
# Copyright (c) 2012-2022                                                                #
# For conditions of distribution and use, see copyright notice in LICENSE.md             #
##########################################################################################

if (SGCT_DEP_INCLUDE_GLAD) 
  add_subdirectory(glad)
  set_target_properties(glad PROPERTIES FOLDER "Dependencies")
  disable_external_warnings(glad)
  sgct_register_package(glad glad::glad)
else ()
  find_package(glad QUIET)
  if (glad_FOUND)
    # We're good
  elseif (TARGET glad)
    sgct_register_package(glad glad::glad)
  else ()
    message(FATAL_ERROR "glad dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_FMT)
  set(FMT_DOC OFF CACHE BOOL "Generate the doc target.")
  set(FMT_INSTALL OFF CACHE BOOL "Generate the install target.")
  set(FMT_TEST OFF CACHE BOOL "Generate the test target.")
  add_subdirectory(fmt)
  mark_as_advanced(FMT_DOC FMT_INSTALL FMT_PEDANTIC FMT_TEST FMT_WERROR)
  set_target_properties(fmt PROPERTIES FOLDER "Dependencies")
  sgct_register_package(fmt fmt::fmt)
else ()
  find_package(fmt QUIET)
  if (fmt_FOUND)
    # We're good
  elseif (TARGET fmt)
    sgct_register_package(fmt fmt::fmt)
  else ()
    message(FATAL_ERROR "fmt dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_SCN)
  add_subdirectory(scnlib)
  disable_external_warnings(scn)
  set_target_properties(scn PROPERTIES FOLDER "Dependencies")
  sgct_register_package(scn scn::scn)
else ()
  find_package(scn QUIET)
  if (scn_FOUND)
    # We're good
  elseif (TARGET scn)
    sgct_register_package(scn scn::scn)
  else ()
    message(FATAL_ERROR "scn dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_ZLIB)
  add_subdirectory(zlib)
  set_target_properties(zlib1 PROPERTIES FOLDER "Dependencies")
  set_target_properties(minizip PROPERTIES FOLDER "Dependencies")
  disable_external_warnings(zlib1)
  disable_external_warnings(minizip)
  sgct_register_package(minizip minizip::minizip)
  sgct_register_package(ZLIB ZLIB::ZLIB)
else ()
  find_package(ZLIB QUIET)
  if (ZLIB_FOUND)
    # We're good
  elseif (TARGET ZLIB)
    sgct_register_package(ZLIB ZLIB::ZLIB)
  else ()
    message(FATAL_ERROR "ZLIB dependency not found")
  endif ()

  find_package(minizip QUIET)
  if (minizip_FOUND)
    # We're good
  elseif (TARGET minizip)
    sgct_register_package(minizip minizip::minizip)
  else ()
    message(FATAL_ERROR "minizip dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_GLFW)
  set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "Build the GLFW example programs")
  set(GLFW_BUILD_TESTS OFF CACHE BOOL "Build the GLFW test programs")
  set(GLFW_BUILD_DOCS OFF CACHE BOOL "Build the GLFW documentation")
  set(GLFW_INSTALL OFF CACHE BOOL "Generate installation target")
  add_subdirectory(glfw)
  set_target_properties(glfw PROPERTIES FOLDER "Dependencies/GLFW3")
  set_target_properties(update_mappings PROPERTIES FOLDER "Dependencies/GLFW3") 
  disable_external_warnings(glfw)
  sgct_register_package(glfw3 glfw)
else ()
  find_package(glfw3 QUIET)
  if (glfw3_FOUND)
    # We're good
  elseif (TARGET glfw3)
    sgct_register_package(glfw3 glfw3)
  else ()
    message(FATAL_ERROR "glfw3 dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_LIBPNG)
  add_subdirectory(lpng)
  set_target_properties(png PROPERTIES FOLDER "Dependencies")
  disable_external_warnings(png)
  add_library(PNG::PNG ALIAS png)
  sgct_register_package(PNG PNG::PNG)
else ()
  find_package(PNG QUIET)
  if (PNG_FOUND)
    # We're good
  elseif (TARGET PNG)
    sgct_register_package(PNG PNG::PNG)
  else ()
    message(FATAL_ERROR "PNG dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_GLM)
  add_library(glm INTERFACE)
  add_library(glm::glm ALIAS glm)
  target_include_directories(glm SYSTEM INTERFACE "glm")
  sgct_register_package(glm glm::glm)
else ()
  find_package(glm QUIET)
  if (glm_FOUND)
    # We're good
  elseif (TARGET glm)
    sgct_register_package(glm glm::glm)
  else ()
    message(FATAL_ERROR "glm dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_STB)
  add_library(stb INTERFACE)
  add_library(stb::stb ALIAS stb)
  target_include_directories(stb SYSTEM INTERFACE "stb")
  sgct_register_package(Stb stb::stb) 
else ()
  find_package(Stb QUIET)
  if (Stb_FOUND)
    # We're good
  elseif (TARGET stb)
    sgct_register_package(stb stb::stb)
  else ()
    message(FATAL_ERROR "stb dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_TINYXML)
  set(BUILD_TESTING OFF)
  add_subdirectory(tinyxml)
  set_target_properties(tinyxml2 PROPERTIES FOLDER "Dependencies")
  disable_external_warnings(tinyxml2)
  add_library(tinyxml2::tinyxml2 ALIAS tinyxml2)
  sgct_register_package(tinyxml2 tinyxml2::tinyxml2)
else ()
  find_package(tinyxml2 QUIET)
  if (tinyxml2_FOUND)
    # We're good
  elseif (TARGET tinyxml2)
    sgct_register_package(tinyxml2 tinyxml2::tinyxml2)
  else ()
    message(FATAL_ERROR "tinyxml2 dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_FREETYPE AND SGCT_FREETYPE_SUPPORT)
  set(SKIP_INSTALL_ALL ON)
  add_subdirectory(freetype2) # needs zconf.h generated by lpng->zlib
  target_include_directories(freetype SYSTEM PUBLIC freetype2/include)
  set_target_properties(freetype PROPERTIES FOLDER "Dependencies")
  disable_external_warnings(freetype)
  sgct_register_package(freetype freetype)
else ()
  find_package(freetype QUIET)
  if (freetype_FOUND OR Freetype_FOUND)
    # We're good
  elseif (TARGET freetype)
    sgct_register_package(freetype freetype)
  else ()
    message(FATAL_ERROR "freetype dependency not found")
  endif ()
endif ()

if (SGCT_DEP_INCLUDE_VRPN AND SGCT_VRPN_SUPPORT)
  add_subdirectory(vrpn)
  set_target_properties(vrpn PROPERTIES FOLDER "Dependencies")
  disable_external_warnings(vrpn)
  sgct_register_package(vrpn vrpn)
endif ()


if (SGCT_DEP_INCLUDE_OPENVR AND SGCT_OPENVR_SUPPORT)
  add_library(openvr INTERFACE)
  sgct_register_package(openvr openvr)
endif ()

if (SGCT_DEP_INCLUDE_TRACY AND NOT TARGET Tracy)
  add_library(TracyClient STATIC "${PROJECT_SOURCE_DIR}/ext/tracy/TracyClient.cpp")
  add_library(Tracy::TracyClient ALIAS TracyClient)
  target_include_directories(TracyClient SYSTEM PUBLIC "tracy")
  set_target_properties(TracyClient PROPERTIES FOLDER "Dependencies")
  disable_external_warnings(TracyClient)
  target_compile_definitions(TracyClient 
    PUBLIC 
      $<$<BOOL:${SGCT_DEP_ENABLE_TRACY}>:TRACY_ENABLE>
    PRIVATE
      _CRT_SECURE_NO_WARNINGS
  )
  sgct_register_package(Tracy Tracy::TracyClient)
else ()
  find_package(Tracy QUIET)
  if (Tracy_FOUND)
    # We're good
  elseif (TARGET Tracy)
    sgct_register_package(Tracy Tracy::TracyClient)
  else ()
    message(FATAL_ERROR "Tracy dependency not found")
  endif ()
endif ()

# nlohmann::json
if (SGCT_DEP_INCLUDE_JSON AND NOT TARGET json)
  add_library(nlohmann_json INTERFACE)
  add_library(nlohmann_json::nlohmann_json ALIAS nlohmann_json)
  target_include_directories(nlohmann_json SYSTEM INTERFACE "json/single_include")
  sgct_register_package(nlohmann_json nlohmann_json::nlohmann_json)
else ()
  find_package(nlohmann_json QUIET)
  if (nlohmann_json_FOUND)
    # We're good
  elseif (TARGET nlohmann_json)
    sgct_register_package(nlohmann_json nlohmann_json::nlohmann_json)
  else ()
    message(FATAL_ERROR "nlohmann_json dependency not found")
  endif ()
endif ()
